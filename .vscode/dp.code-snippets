{
	// Place your competition_cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"algorithm to detect LIS": {
		"prefix": "lis_longest_increasing_sequence",
		"body": [
		  "/* LIS */",
		  "// algorithm to detect LIS (longest increasing sequence)",
		  "// time complexity : O(N logN)",
		  "// ",
		  "// Parameters",
		  "// 1. a (vector<T>) : constant reference to targeted vector",
		  "// 2. strict (bool) : strictly increasing(true) or not strictly increasing(false)",
		  "// 3. up_or_not (bool) : increasing(true) or decreasing(false)",
		  "//",
		  "// Returns",
		  "// 1. lis (vector<T>) : LIS",
		  "template<class T>",
		  "std::vector<T> lis(const std::vector<T> &a, bool strict=false, bool up_or_not=true) {",
		  "    std::vector<T> lis;",
		  "    if(up_or_not) {",
		  "        for(auto &p : a) {",
		  "            typename std::vector<T>::iterator iter;",
		  "            if(strict) iter = std::lower_bound(lis.begin(), lis.end(), p);",
		  "            else iter = std::upper_bound(lis.begin(), lis.end(), p);",
		  "            if(lis.end()==iter) lis.emplace_back(p);",
		  "            else *iter = p;",
		  "        }",
		  "    }else {",
		  "        std::vector<T> rev = a;",
		  "        reverse(rev.begin(), rev.end());",
		  "        for(auto &p : rev) {",
		  "            typename std::vector<T>::iterator iter;",
		  "            if(strict) iter = std::lower_bound(lis.begin(), lis.end(), p);",
		  "            else iter = std::upper_bound(lis.begin(), lis.end(), p);",
		  "            if(lis.end()==iter) lis.emplace_back(p);",
		  "            else *iter = p;",
		  "        }",
		  "    }",
		  "    return lis;",
		  "}",
		  ""
		],
		"description": "algorithm to detect LIS"
	}
}