{
	// Place your competition_cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"Disjoint Set Union (Union Find)": {
		"prefix": "disjoint_set_union",
		"body": [
		  "/* Disjoint Set Union (Union Find) */",
		  "// combining two sets, or judging whether two elements are in same group",
		  "// time complexity : O(\\alpha(N))",
		  "//",
		  "// Methods",
		  "// 1. merge : merge the group including x and the group including y",
		  "// 2. is_same : judge whether x and y are in same group",
		  "// 3. size : return size of the group including x",
		  "class DisjointSetUnion {",
		  "  public:",
		  "    using i32 = int_fast32_t;",
		  "    explicit DisjointSetUnion(i32 sz) : parent(sz), siz(sz, 1) {",
		  "        for(i32 i = 0; i < sz; ++i) parent[i] = i;",
		  "    }",
		  "",
		  "    // merge two groups",
		  "    bool merge(i32 x, i32 y) {",
		  "        x = root(x);",
		  "        y = root(y);",
		  "        if(x == y) return false;",
		  "        // merge tech",
		  "        if (siz[x] < siz[y]) std::swap(x,y);",
		  "        siz[x] += siz[y];",
		  "        parent[y] = x;",
		  "        return true;",
		  "    }",
		  "    // judge whether x and y are in same group ",
		  "    bool is_same(i32 x, i32 y) {",
		  "        return (root(x) == root(y));",
		  "    }",
		  "    // Return size of the group including x",
		  "    i32 size(i32 x) {",
		  "        return siz[root(x)];",
		  "    }",
		  "",
		  "  private:",
		  "    std::vector<i32> parent;",
		  "    std::vector<i32> siz;",
		  "",
		  "    // return root-id",
		  "    i32 root(i32 x) {",
		  "        while(parent[x] != x) {",
		  "            x = parent[x] = parent[parent[x]];",
		  "        }",
		  "        return x;",
		  "    }",
		  "};",
		  ""
		],
		"description": "Disjoint Set Union (Union Find)"
	},
	"Segment Tree": {
		"prefix": "segment_tree",
		"body": [
		  "/* Monoid */",
		  "// Example",
		  "// /* Add (Monoid) */",
		  "// struct Add {",
		  "//     using DataType = std::int_fast64_t;",
		  "//     static const DataType identity_element;",
		  "//     static DataType op(DataType l, DataType r) {",
		  "//         return l + r;",
		  "//     }",
		  "// };",
		  "// const Add::DataType Add::identity_element = 0;",
		  "",
		  "/* Segment Tree */",
		  "//",
		  "// Attributes (public)",
		  "// 1. no attributes",
		  "//",
		  "// Methods (public)",
		  "// 1. set : set value at i-th element",
		  "//          time complexity : O(logN)",
		  "// 2. query : reply query to [l, r)",
		  "//          time complexity : O(logN)",
		  "// 3. size : return size of array",
		  "//",
		  "// Operators (public)",
		  "// 1. [] : access to index. rewriting element is forbidden!",
		  "//",
		  "template <class Monoid>",
		  "class SegmentTree {",
		  "    using T = typename Monoid::DataType;",
		  "",
		  "  public:",
		  "    explicit SegmentTree(std::size_t n) : siz(n), tree(n*2, Monoid::identity_element) {}",
		  "    explicit SegmentTree(const std::vector<T>& v) : siz(v.size()), tree(siz*2, Monoid::identity_element) {",
		  "        for (std::size_t i = 0; i < siz; ++i) tree[i + siz] = v[i];",
		  "        for (std::size_t i = siz - 1; i > 0; --i) {",
		  "            tree[i] = Monoid::op(tree[i << 1 | 0], tree[i << 1 | 1]);",
		  "        }",
		  "    }",
		  "",
		  "    void set(T value, std::size_t idx) {",
		  "        tree[idx += size()] = value;",
		  "        while (idx >>= 1) {",
		  "            tree[idx] = Monoid::op(tree[idx << 1 | 0], tree[idx << 1 | 1]);",
		  "        }",
		  "    }",
		  "",
		  "    T query(std::size_t l, std::size_t r) const {",
		  "        T result_l = Monoid::identity_element;",
		  "        T result_r = Monoid::identity_element;",
		  "        for (l += siz, r += siz; l < r; l >>= 1, r >>= 1) {",
		  "            if (l & 1) result_l = Monoid::op(result_l, tree[l++]);",
		  "            if (r & 1) result_r = Monoid::op(tree[--r], result_r);",
		  "        }",
		  "        return Monoid::op(result_l, result_r);",
		  "    }",
		  "",
		  "    std::size_t size() const noexcept { return siz; }",
		  "",
		  "    const T& operator[](std::size_t idx) const& { return tree[idx + size()]; }",
		  "    T operator[](std::size_t idx) const&& { return std::move(tree[idx + size()]); }",
		  "",
		  "  private:",
		  "    const std::size_t siz;",
		  "    std::vector<T> tree;",
		  "};",
		  ""
		],
		"description": "Segment Tree"
	}
}