{
	// Place your competition_cpp workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"template of source code for competition": {
		"prefix": "competition_template",
		"body": [
		  "#include <bits/stdc++.h>",
		  "",
		  "#define debug(x) std::cout <<\"DEBUG: \"<< #x << \"\\nâ†“\\n\" << (x) << '\\n'",
		  "#define rep(i,n) for (std::size_t i = 0; i < ((std::size_t)(n)); ++i)",
		  "#define all(x) (x).begin(),(x).end()",
		  "",
		  "// type alias",
		  "using i32 = std::int_fast32_t;",
		  "using i64 = std::int_fast64_t;",
		  "using u32 = std::uint_fast32_t;",
		  "using u64 = std::uint_fast64_t;",
		  "using usize = std::size_t;",
		  "using ld = long double;",
		  "",
		  "template <class T> using vec = std::vector<T>;",
		  "template <class T> using maxheap = std::priority_queue<T>;",
		  "template <class T> using minheap = std::priority_queue<T, std::vector<T>, std::greater<T>>;",
		  "using vi = vec<i32>;",
		  "using vl = vec<i64>;",
		  "using vld = vec<ld>;",
		  "using vvi = vec<vi>;",
		  "using PII = std::pair<i32, i32>;",
		  "",
		  "// ostream-expansion",
		  "template <class T, class U> std::ostream& operator<<(std::ostream& os, const std::pair<T, U>& p) {",
		  "    os << \"(\" << p.first << \", \" << p.second << \")\";",
		  "    return os;",
		  "}",
		  "",
		  "template <class T> std::ostream& operator<<(std::ostream& os, const std::vector<T>& v) {",
		  "    std::size_t i = 0;",
		  "    os << \"[\";",
		  "    for (const auto& val : v) os << val << (++i < v.size() ? \", \" : \"]\");",
		  "    return os;",
		  "}",
		  "",
		  "template <class T> std::ostream& operator<<(std::ostream& os, const std::set<T>& st) {",
		  "    std::size_t i = 0;",
		  "    os << \"{\";",
		  "    for (const auto& val : st) os << val << (++i < st.size() ? \", \" : \"}\");",
		  "    return os;",
		  "}",
		  "",
		  "template <class T, class U> std::ostream& operator<<(std::ostream& os, const std::map<T, U>& mp) {",
		  "    std::size_t i = 0;",
		  "    os << \"{\";",
		  "    for (const auto& p : mp) os << p.first << \": \" << p.second << (++i < mp.size() ? \", \" : \"}\");",
		  "    return os;",
		  "}",
		  "",
		  "// constants",
		  "constexpr ld pi = M_PIf64x;",
		  "constexpr i64 infll = std::numeric_limits<i64>::max() >> 1;",
		  "constexpr i32 inf = std::numeric_limits<i32>::max() >> 1;",
		  "",
		  "/* Class & Function */",
		  "template <class T, class U> inline bool chmax(T &a, const U &b) {",
		  "    if (a < b) { a = b; return true; }",
		  "    return false;",
		  "}",
		  "",
		  "template <class T, class U> inline bool chmin(T &a, const U &b) {",
		  "    if (a > b) { a = b; return true; }",
		  "    return false;",
		  "}",
		  "",
		  "template <class T> auto make_vec(std::size_t n, const T &value) {",
		  "    return std::vector<T>(n, value);",
		  "}",
		  "template <class... Args> auto make_vec(std::size_t n, Args... args) {",
		  "    return std::vector<decltype(make_vec(args...))>(n, make_vec(args...));",
		  "}",
		  "",
		  "namespace space_575 {  // unsafe: Name collisions can occur.",
		  "using namespace std;",
		  "",
		  "// edit functions here",
		  "",
		  "",
		  "};",
		  "",
		  "/* Main */",
		  "signed main() {",
		  "    using namespace space_575;",
		  "",
		  "    // fast io",
		  "    std::cin.tie(nullptr);",
		  "    std::ios::sync_with_stdio(false);",
		  "    // std::cout << std::fixed << std::setprecision(15);  // fix io precision",
		  "",
		  "    $0",
		  "",
		  "}",
		  ""
		],
		"description": "template of source code for competition"
	},
	"template for class-file": {
		"prefix": "library_template_for_class",
		"body": [
		  "// ${1:<Name>}",
		  "// ${2:<short description>}",
		  "// Verified : <url>",
		  "",
		  "// dependencies",
		  "// <#include \"lib/hoge.hpp\">",
		  "// <#include <bits/stdc++.h>>",
		  "",
		  "",
		  "/* ${1:<Name>} */",
		  "// ${2:<short description>}",
		  "//",
		  "// List of Member",
		  "// param:",
		  "// 1. <p>: <type>",
		  "// function:",
		  "// 1. <f>(<p>: <type>) -> <type>",
		  "$0",
		  ""
		],
		"description": "template for class-file"
	},
	"template for function-file": {
		"prefix": "library_template_for_function",
		"body": [
		  "// ${1:<Name>}",
		  "// ${2:<short description>}",
		  "// Verified : <url>",
		  "",
		  "// dependencies",
		  "// <#include \"lib/hoge.hpp\">",
		  "// <#include <bits/stdc++.h>>",
		  "",
		  "",
		  "/* ${1:<Name>} */",
		  "// ${2:<short description>}",
		  "//",
		  "// param:",
		  "// 1. <p>: <type>",
		  "// return:",
		  "// <p>: <type>",
		  "$0",
		  ""
		],
		"description": "template for function-file"
	}
}